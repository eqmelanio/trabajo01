CREATE DATABASE SISTEMALIBROS
GO
USE SISTEMALIBROS
GO
--TABLA TIPO_USUARIO
CREATE TABLE TIPOUSUARIO(CODTIPOUSU CHAR(7) NOT NULL
PRIMARY KEY,NOMTIPO VARCHAR(40))
GO
INSERT INTO TIPOUSUARIO VALUES('TIP-001','ADMINISTRADOR')
GO
INSERT INTO TIPOUSUARIO VALUES('TIP-002','USUARIO')
GO
SELECT * FROM TIPOUSUARIO
GO
--TABLA USUARIO
--A (ACTIVADO) B(BLOQUEADO) 
CREATE TABLE USUARIO(COD_USU CHAR(7) NOT NULL PRIMARY KEY,
NOM_USU VARCHAR(40),CLAVE_USU VARCHAR(40),
CODTIPOUSU CHAR(7) CONSTRAINT TIPOUSU_FK FOREIGN KEY
REFERENCES TIPOUSUARIO(CODTIPOUSU),
ESTADO_USU CHAR(1))
GO

--LISTADO DE TIPOS DE USUARIOS
CREATE PROCEDURE SP_TIPOS_USUARIOS
AS
  SELECT  * FROM TIPOUSUARIO ORDER BY  CODTIPOUSU
  GO

EXEC SP_TIPOS_USUARIOS
GO

--MANTENIMIENTO DE LA TABLA USUARIO (ADMINISTRADOR)
ALTER PROCEDURE SP_LISTADO_USUARIO
AS
   SELECT COD_USU AS CODIGO,NOM_USU AS USURIO,
   CLAVE_USU AS CLAVE,CODTIPOUSU AS TIPO,
   ESTADO_USU AS ESTADO FROM USUARIO 
   ORDER BY COD_USU
   GO

   EXEC SP_LISTADO_USUARIO
   GO


--USUARIOS, CLAVES, TIPOS (ADMINISTRADOR O USUARIO)
ALTER PROCEDURE SP_ACCESO_USUARIO
@XNOMUSU VARCHAR(40),
@XCLAVEUSU VARCHAR(40),
@XNOMTIPOUSU VARCHAR(40)
AS
  SELECT USUARIO.NOM_USU,USUARIO.CLAVE_USU,
  TIPOUSUARIO.NOMTIPO FROM USUARIO INNER JOIN
  TIPOUSUARIO
  ON(TIPOUSUARIO.CODTIPOUSU=USUARIO.CODTIPOUSU)
  WHERE USUARIO.NOM_USU=@XNOMUSU AND
  USUARIO.CLAVE_USU=@XCLAVEUSU AND
  TIPOUSUARIO.NOMTIPO=@XNOMTIPOUSU 
  AND USUARIO.ESTADO_USU='A'
  GO 
  
EXEC SP_ACCESO_USUARIO 'MAMANI','ROLY','ADMINISTRADOR'
GO

EXEC SP_ACCESO_USUARIO 'TORRES','LOPEZ','USUARIO'
GO
--USUARIOS BLOQUEADOS DESDE EL PRIMER CICLO
EXEC SP_ACCESO_USUARIO 'GOMEZ','LADULCE','USUARIO'
GO

EXEC SP_ACCESO_USUARIO 'LEON','SAYAYIN','USUARIO'
GO
select * from usuario
--INGRESO DE USUARIOS
ALTER PROCEDURE SP_INGRESO_USUARIOS
@XCODUSU CHAR(7),
@XNOMUSU VARCHAR(40),
@XCLAVEUSU VARCHAR(40),
@XCODTIPO CHAR(7),
@XESTADOUSU CHAR(1)
AS
  INSERT INTO USUARIO VALUES(@XCODUSU,@XNOMUSU,@XCLAVEUSU,
                              @XCODTIPO,@XESTADOUSU)
GO

EXEC SP_INGRESO_USUARIOS 'USU-001','MAMANI','ROLY','TIP-001','A'
GO
EXEC SP_INGRESO_USUARIOS 'USU-002','CASTILLO','SOTO','TIP-001','A'
GO
EXEC SP_INGRESO_USUARIOS 'USU-003','TORRES','LOPEZ','TIP-002','A'
GO
EXEC SP_INGRESO_USUARIOS 'USU-004','GOMEZ','LADULCE','TIP-002','B'
GO
EXEC SP_INGRESO_USUARIOS 'USU-005','LEON','SAYAYIN','TIP-002','B'
GO

SELECT * FROM USUARIO
GO

--CODIGO AUTOGENERADO DE USUARIOS
  CREATE PROCEDURE SP_CODIGO_GENERA_USUARIOS
  @CODUSU CHAR(7) OUTPUT
	AS
	SELECT @CODUSU =MAX(RIGHT (COD_USU,3)) FROM USUARIO
	DECLARE @SERIE CHAR(4)
	IF @CODUSU  IS NULL
	BEGIN
	   SELECT @CODUSU ='USU-'+'001'
	END
	ELSE
	BEGIN
		SELECT @SERIE ='USU-'
	   SELECT @CODUSU =@SERIE+REPLICATE('0',3-LEN (LTRIM(
	   STR(@CODUSU)+1)))	+LTRIM(STR(@CODUSU)+1)
	END
	GO

 DECLARE @XCODUSU CHAR(7)
 EXECUTE SP_CODIGO_GENERA_USUARIOS @XCODUSU OUTPUT
 SELECT @XCODUSU AS CODIGO
 GO

 --BUSQUEDA DE USUARIOS
ALTER PROCEDURE SP_BUSQUEDA_USUARIOS
@XCODUSU CHAR(7)
AS
 SELECT COD_USU FROM USUARIO
  WHERE COD_USU=@XCODUSU
GO

--BUSQUEDA Y MOSTRAR TODOS LOS CAMPOS DE LOS USUARIOS
ALTER PROCEDURE SP_MOSTRAR_USUARIOS
@XCODUSU CHAR(7)
AS
 SELECT COD_USU AS CODIGO,NOM_USU AS USURIO,
   CLAVE_USU AS CLAVE,CODTIPOUSU AS TIPO,
   ESTADO_USU AS ESTADO FROM USUARIO
   WHERE COD_USU=@XCODUSU
GO

SELECT * FROM USUARIO
--ACTUALIZAR LOS USUARIOS
ALTER PROCEDURE SP_ACTUALIZA_USUARIOS
@XCODUSU CHAR(7),
@XNOMUSU VARCHAR(40),
@XCLAVEUSU VARCHAR(40),
@XCODTIPO CHAR(7),
@XESTADOUSU CHAR(1)
AS 
  UPDATE USUARIO SET NOM_USU=@XNOMUSU,
  CLAVE_USU=@XCLAVEUSU,CODTIPOUSU=@XCODTIPO,
  ESTADO_USU= @XESTADOUSU  WHERE COD_USU=@XCODUSU
  GO
--ELIMINAR USUARIOS
CREATE PROCEDURE SP_ELIMINA_USUARIOS
@XCODUSU CHAR(7)
AS
   DELETE FROM USUARIO WHERE COD_USU=@XCODUSU
GO

--TABLA LIBROS
--AUTOR
CREATE TABLE AUTOR(COD_AUTOR CHAR(7) NOT NULL PRIMARY KEY,
NOM_AUTOR VARCHAR(40))
GO
INSERT INTO AUTOR VALUES('AUT-001','MARIA')
GO
INSERT INTO AUTOR VALUES('AUT-002','KAREN')
GO
INSERT INTO AUTOR VALUES('AUT-003','RAQUEL')
GO
INSERT INTO AUTOR VALUES('AUT-004','CARMEN')
GO
INSERT INTO AUTOR VALUES('AUT-005','ENRIQUE')
GO
INSERT INTO AUTOR VALUES('AUT-006','DANTE')
GO
--LISTADO DE AUTORES
CREATE PROCEDURE SP_LISTA_AUTORES
AS
   SELECT * FROM AUTOR ORDER BY COD_AUTOR
GO
EXEC SP_LISTA_AUTORES
GO
--EDITORIAL
CREATE TABLE EDITORIAL(COD_EDIT CHAR(7) NOT NULL PRIMARY KEY,
NOM_EDIT VARCHAR(40))
GO
INSERT INTO EDITORIAL VALUES('EDI-001','NAVARRETE')
GO
INSERT INTO EDITORIAL VALUES('EDI-002','BRUÑO')
GO
INSERT INTO EDITORIAL VALUES('EDI-003','EL LOGIN')
GO
INSERT INTO EDITORIAL VALUES('EDI-004','EL KEYLO')
GO
INSERT INTO EDITORIAL VALUES('EDI-005','EL SABER')
GO
INSERT INTO EDITORIAL VALUES('EDI-006','EL ANTI KEYKO')
GO
CREATE PROCEDURE SP_LISTA_EDITORIAL
AS
   SELECT * FROM EDITORIAL ORDER BY COD_EDIT
GO
EXEC SP_LISTA_EDITORIAL
GO
--IMPRENTA
CREATE TABLE IMPRENTA(COD_IMP CHAR(7) NOT NULL PRIMARY KEY,
NOM_IMP VARCHAR(40))
GO
INSERT INTO IMPRENTA VALUES('IMP-001','BRUÑO')
GO
INSERT INTO IMPRENTA VALUES('IMP-002','SANTILLAN')
GO
INSERT INTO IMPRENTA VALUES('IMP-003','EL INKA')
GO
INSERT INTO IMPRENTA VALUES('IMP-004','EL BECARIO')
GO
INSERT INTO IMPRENTA VALUES('IMP-005','EL BARRABAS')
GO
INSERT INTO IMPRENTA VALUES('IMP-006','EL CHINO')
GO
CREATE PROCEDURE SP_LISTADO_IMPRENTA
AS
SELECT * FROM IMPRENTA ORDER BY COD_IMP
GO
EXEC SP_LISTADO_IMPRENTA
GO
--IDIOMA
CREATE TABLE IDIOMA(COD_IDIOMA CHAR(7) NOT NULL PRIMARY KEY,
NOM_IDIOMA VARCHAR(40))
GO
INSERT INTO IDIOMA VALUES('IDI-001','ESPAÑOL CATALAN')
GO
INSERT INTO IDIOMA VALUES('IDI-002','ESPAÑOL LATINO')
GO
INSERT INTO IDIOMA VALUES('IDI-003','INGLES')
GO
INSERT INTO IDIOMA VALUES('IDI-004','PORTUGUES')
GO
INSERT INTO IDIOMA VALUES('IDI-005','RUSO')
GO
INSERT INTO IDIOMA VALUES('IDI-006','CHINO MANDARIN')
GO
INSERT INTO IDIOMA VALUES('IDI-007','JAPONES')
GO
CREATE PROCEDURE SP_LISTADO_IDIOMA
AS
    SELECT * FROM IDIOMA ORDER BY COD_IDIOMA
  GO
  EXEC SP_LISTADO_IDIOMA
  GO
  --PAIS
CREATE TABLE PAIS(COD_PAIS CHAR(7) NOT NULL PRIMARY KEY,
NOM_PAIS VARCHAR(40))
GO
INSERT INTO PAIS VALUES('PAI-001','ESPAÑA')
GO
INSERT INTO PAIS VALUES('PAI-002','PERU')
GO
INSERT INTO PAIS VALUES('PAI-003','EEUU')
GO
INSERT INTO PAIS VALUES('PAI-004','PORTUGAL')
GO
INSERT INTO PAIS VALUES('PAI-005','RUSIA')
GO
INSERT INTO PAIS VALUES('PAI-006','CHINA')
GO
INSERT INTO PAIS VALUES('PAI-007','JAPON')
GO
CREATE PROCEDURE SP_LISTADO_PAIS
AS
  SELECT * FROM PAIS ORDER BY COD_PAIS
  GO
EXEC SP_LISTADO_PAIS
GO
--LIBRO
CREATE TABLE LIBRO(COD_LIBRO CHAR(7) NOT NULL PRIMARY KEY,
NOM_LIBRO VARCHAR(40),PREC_LIBRO DECIMAL(8,2),
STOCK_LIBRO INT,
COD_AUTOR CHAR(7) CONSTRAINT AUTLIB_FK
FOREIGN KEY REFERENCES AUTOR(COD_AUTOR),
COD_EDIT CHAR(7) CONSTRAINT EDITLIB_FK
FOREIGN KEY REFERENCES EDITORIAL(COD_EDIT),
COD_IMP CHAR(7) CONSTRAINT IMPLIBRO_FK
FOREIGN KEY REFERENCES IMPRENTA(COD_IMP),
COD_IDIOMA CHAR(7) CONSTRAINT IDILIBRO_FK
FOREIGN KEY REFERENCES IDIOMA(COD_IDIOMA),
COD_PAIS CHAR(7) CONSTRAINT PAISLIB_FK 
FOREIGN KEY REFERENCES PAIS(COD_PAIS))
GO

--CODIGO AUTOGENERADO DE LA TABLA LIBROS
CREATE PROCEDURE SP_CODIGO_GENERA_LIBROS
@CODLIBRO CHAR(7) OUTPUT
AS
--CAPTURA EL MAXIMO VALOR DEL ULTIMO CODIGO A PARTIR DE 
--LA DERECHA (LIB-004) EL CODIGO SIGUIENTE: LIB-005
--EL ULTIMO CODIGO SE ALMACENA EN LA VARIABLE @CODLIBRO
SELECT @CODLIBRO =MAX(RIGHT (COD_LIBRO,3)) FROM LIBRO 
--SE DECLARA UNA VARIABLE @SERIE (LIB-) (LIB-001,LIB-002,LIB-003)
DECLARE @SERIE CHAR(4)
--SI LA VARIABLE @CODLIBRO ES NULO
IF @CODLIBRO  IS NULL
BEGIN
--EL VALOR INICIAL DE DE @CODLIBRO=LIB-001 
  SELECT @CODLIBRO ='LIB-'+'001'
END
ELSE
--SI LA TABLA TIENE REGISTROS: LIB-005, SE GENERA LIB-006
BEGIN
--SE GENERA EL SIGUIENTE CODIGO AUTOGENERADO
SELECT @SERIE ='LIB-'
SELECT @CODLIBRO =@SERIE+REPLICATE('0',3-LEN (LTRIM(STR(@CODLIBRO)+1)))
+LTRIM(STR(@CODLIBRO)+1)
END
GO

--EJECUTANDO AL PROCEDIMIENTO ALMACENADO
DECLARE @XCODLIBRO CHAR(7)
--TIENE COMO PARAMETRO DE SALIDA (OUTPUT)
EXECUTE SP_CODIGO_GENERA_LIBROS @XCODLIBRO OUTPUT
SELECT @XCODLIBRO AS CODIGO
GO


--MANTENIMIENTO DE LA TABLA LIBROS
CREATE PROCEDURE SP_LISTADO_LIBROS
AS
  SELECT A.COD_LIBRO AS CODIGO,A.NOM_LIBRO AS LIBRO,
  A.PREC_LIBRO AS PRECIO,A.STOCK_LIBRO AS STOCK,
  B.NOM_AUTOR AS AUTOR,C.NOM_EDIT AS EDITORIAL,
  D.NOM_IMP AS IMPRENTA,E.NOM_IDIOMA AS IDIOMA,
  F.NOM_PAIS AS PAIS FROM LIBRO A INNER JOIN 
  AUTOR B ON(B.COD_AUTOR=A.COD_AUTOR)
  INNER JOIN EDITORIAL C ON(C.COD_EDIT=A.COD_EDIT)
  INNER JOIN IMPRENTA D ON(D.COD_IMP=A.COD_IMP)
  INNER JOIN IDIOMA E ON(E.COD_IDIOMA=A.COD_IDIOMA)
  INNER JOIN PAIS F ON(F.COD_PAIS=A.COD_PAIS)
  ORDER BY A.COD_LIBRO
  GO
  EXEC SP_LISTADO_LIBROS
  GO

  --Busqueda de Libros por Codigo
  CREATE PROCEDURE SP_BUSQUEDA_LIBROS
  @XCODLIBRO CHAR(7)
  AS
		SELECT A.COD_LIBRO AS CODIGO,A.NOM_LIBRO AS LIBRO,
		A.PREC_LIBRO AS PRECIO,A.STOCK_LIBRO AS STOCK,
		B.NOM_AUTOR AS AUTOR,C.NOM_EDIT AS EDITORIAL,
		D.NOM_IMP AS IMPRENTA,E.NOM_IDIOMA AS IDIOMA,
		F.NOM_PAIS AS PAIS FROM LIBRO A INNER JOIN 
	   AUTOR B ON(B.COD_AUTOR=A.COD_AUTOR)
	   INNER JOIN EDITORIAL C ON(C.COD_EDIT=A.COD_EDIT)
	   INNER JOIN IMPRENTA D ON(D.COD_IMP=A.COD_IMP)
	   INNER JOIN IDIOMA E ON(E.COD_IDIOMA=A.COD_IDIOMA)
	   INNER JOIN PAIS F ON(F.COD_PAIS=A.COD_PAIS)
	   WHERE A.COD_LIBRO= @XCODLIBRO
GO
--BUSQUEDA POR EL CAMPO CODIGO
--SI EXISTE EL CODIGO DEL LIBRO
CREATE PROCEDURE SP_BUSQUEDA_CODIGOLIBRO
@XCODLIB CHAR(7)
AS
  SELECT COD_LIBRO FROM LIBRO WHERE COD_LIBRO=@XCODLIB
GO

EXEC SP_BUSQUEDA_CODIGOLIBRO 'LIB-001'
GO

--AGREGAR LIBROS
CREATE PROCEDURE SP_INSERTAR_LIBROS
@XCODLIB CHAR(7),
@XNOMLIB VARCHAR(40),
@XPRECLIB DECIMAL(8,2),
@XSTOCKLIB INT,
@XCODAUTOR CHAR(7),
@XCODEDIT CHAR(7),
@XCODIMP CHAR(7),
@XCODIDIOMA CHAR(7),
@XCODPAIS CHAR(7)
AS
  INSERT INTO LIBRO VALUES(@XCODLIB,@XNOMLIB,@XPRECLIB,
  @XSTOCKLIB,@XCODAUTOR,@XCODEDIT,@XCODIMP,
  @XCODIDIOMA,@XCODPAIS)
GO

--ACTUALIZAR LIBROS
CREATE PROCEDURE SP_ACTUALIZA_LIBROS
@XCODLIB CHAR(7),
@XNOMLIB VARCHAR(40),
@XPRECLIB DECIMAL(8,2),
@XSTOCKLIB INT,
@XCODAUTOR CHAR(7),
@XCODEDIT CHAR(7),
@XCODIMP CHAR(7),
@XCODIDIOMA CHAR(7),
@XCODPAIS CHAR(7)
AS
   UPDATE LIBRO SET NOM_LIBRO=@XNOMLIB,PREC_LIBRO=@XPRECLIB,
   STOCK_LIBRO=@XSTOCKLIB,COD_AUTOR=@XCODAUTOR,
   COD_EDIT=@XCODEDIT,COD_IMP=@XCODIMP,
   COD_IDIOMA=@XCODIDIOMA,COD_PAIS=@XCODPAIS
   WHERE COD_LIBRO=@XCODLIB
GO

--ELIMINAR LIBROS
CREATE PROCEDURE SP_ELIMINA_LIBROS
@XCODLIBRO CHAR(7)
AS
  DELETE FROM LIBRO WHERE COD_LIBRO=@XCODLIBRO
GO

SELECT * FROM LIBRO
GO


